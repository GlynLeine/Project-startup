<?xml version="1.0"?>
<doc>
    <assembly>
        "Args-Core"
    </assembly>
    <members>
        <member name="M:Args.ComponentManager.AddComponent(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,System.UInt32)">
            <summary>
Request component creation on component name.
Is less reliable than the templated version since it does not check the component type on compile time.
On success returns pointer to created component. Will return nullptr with unknown types.
</summary>
        </member>
        <member name="D:glm.size4_t">
Vector type based of four std::size_t components.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size3_t">
Vector type based of three std::size_t components.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size2_t">
Vector type based of two std::size_t components.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size1_t">
Vector type based of one std::size_t component.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size4">
Vector type based of four std::size_t components.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size3">
Vector type based of three std::size_t components.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size2">
Vector type based of two std::size_t components.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.size1">
@addtogroup gtx_std_based_type
@{
Vector type based of one std::size_t component.
@see GLM_GTX_std_based_type
</member>
        <member name="D:glm.byte">
@addtogroup gtx_raw_data
@{
</member>
        <member name="D:glm.gtx.u8vec1">
@addtogroup gtx_number_precision
@{
</member>
        <member name="M:_wassert(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
@ref gtx_vector_query
</member>
        <member name="M:glm.pow(System.Int32,System.UInt32)">
@addtogroup gtx_integer
@{
</member>
        <member name="D:glm.ddualquat">
Dual-quaternion of default double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.fdualquat">
Dual-quaternion of single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.dualquat">
Dual-quaternion of floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.highp_ddualquat">
Dual-quaternion of high double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.mediump_ddualquat">
Dual-quaternion of medium double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.lowp_ddualquat">
Dual-quaternion of low double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.highp_fdualquat">
Dual-quaternion of high single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.mediump_fdualquat">
Dual-quaternion of medium single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.lowp_fdualquat">
Dual-quaternion of low single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.highp_dualquat">
Dual-quaternion of high single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.mediump_dualquat">
Dual-quaternion of medium single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.lowp_dualquat">
Dual-quaternion of low single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="M:glm.floatDistance(System.Double,System.Double)">
Return the distance in the number of ULP between 2 double-precision floating-point scalars.

@see ext_scalar_ulp
</member>
        <member name="M:glm.floatDistance(System.Single,System.Single)">
Return the distance in the number of ULP between 2 single-precision floating-point scalars.

@see ext_scalar_ulp
</member>
        <member name="M:glm.float_distance(System.Double,System.Double)">
Return the distance in the number of ULP between 2 double-precision floating-point scalars.

@see gtc_ulp
</member>
        <member name="M:glm.float_distance(System.Single,System.Single)">
Return the distance in the number of ULP between 2 single-precision floating-point scalars.

@see gtc_ulp
</member>
        <member name="M:glm.packUint2x32(glm.vec&lt;0x2,System.UInt32,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed unsigned integer.

@see gtc_packing
@see u32vec2 unpackUint2x32(int p)
</member>
        <member name="M:glm.packInt2x32(glm.vec&lt;0x2,System.Int32,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed integer.

@see gtc_packing
@see i32vec2 unpackInt2x32(int p)
</member>
        <member name="M:glm.packUint4x16(glm.vec&lt;0x4,System.UInt16,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed unsigned integer.

@see gtc_packing
@see u16vec4 unpackUint4x16(uint64 p)
</member>
        <member name="M:glm.packUint2x16(glm.vec&lt;0x2,System.UInt16,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed unsigned integer.

@see gtc_packing
@see u16vec2 unpackUint2x16(uint p)
</member>
        <member name="M:glm.packInt4x16(glm.vec&lt;0x4,System.Int16,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed integer.

@see gtc_packing
@see i16vec4 unpackInt4x16(int64 p)
</member>
        <member name="M:glm.packInt2x16(glm.vec&lt;0x2,System.Int16,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed integer.

@see gtc_packing
@see i16vec2 unpackInt2x16(int p)
</member>
        <member name="M:glm.packUint4x8(glm.vec&lt;0x4,System.Byte,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed unsigned integer.

@see gtc_packing
@see u8vec4 unpackUint4x8(uint32 p)
</member>
        <member name="M:glm.packInt4x8(glm.vec&lt;0x4,System.SByte,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed integer.

@see gtc_packing
@see i8vec4 unpackInt4x8(int32 p)
</member>
        <member name="M:glm.packUint2x8(glm.vec&lt;0x2,System.Byte,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed unsigned integer.

@see gtc_packing
@see u8vec2 unpackInt2x8(uint16 p)
</member>
        <member name="M:glm.packInt2x8(glm.vec&lt;0x2,System.SByte,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component from an integer vector into a packed integer.

@see gtc_packing
@see i8vec2 unpackInt2x8(int16 p)
</member>
        <member name="M:glm.packUnorm2x3_1x2(glm.vec&lt;0x3,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component of the normalized floating-point vector into unsigned integer values.

@see gtc_packing
@see vec3 unpackUnorm2x3_1x2(uint8 p)
</member>
        <member name="M:glm.packUnorm3x5_1x1(glm.vec&lt;0x4,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component of the normalized floating-point vector into unsigned integer values.

@see gtc_packing
@see vec4 unpackUnorm3x5_1x1(uint16 p)
</member>
        <member name="M:glm.packUnorm1x5_1x6_1x5(glm.vec&lt;0x3,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component of the normalized floating-point vector into unsigned integer values.

@see gtc_packing
@see vec3 unpackUnorm1x5_1x6_1x5(uint16 p)
</member>
        <member name="M:glm.packUnorm4x4(glm.vec&lt;0x4,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component of the normalized floating-point vector into unsigned integer values.

@see gtc_packing
@see vec4 unpackUnorm4x4(uint16 p)
</member>
        <member name="M:glm.packUnorm2x4(glm.vec&lt;0x2,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert each component of the normalized floating-point vector into unsigned integer values.

@see gtc_packing
@see vec2 unpackUnorm2x4(uint8 p)
</member>
        <member name="M:glm.unpackSnorm4x16(System.UInt64)">
First, unpacks a single 64-bit unsigned integer p into four 16-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm4x16: clamp(f / 32767.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see gtc_packing
@see float unpackSnorm1x16(uint16 p)
@see vec2 unpackSnorm2x16(uint32 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm1x16(System.UInt16)">
First, unpacks a single 16-bit unsigned integer p into a single 16-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned scalar.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm1x16: clamp(f / 32767.0, -1, +1)

@see gtc_packing
@see vec2 unpackSnorm2x16(uint32 p)
@see vec4 unpackSnorm4x16(uint64 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm1x16.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm4x16(System.UInt64)">
First, unpacks a single 64-bit unsigned integer p into four 16-bit unsigned integers.
Then, each component is converted to a normalized floating-point value to generate the returned four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnormx4x16: f / 65535.0

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see gtc_packing
@see float unpackUnorm1x16(uint16 p)
@see vec2 unpackUnorm2x16(uint32 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm1x16(System.UInt16)">
First, unpacks a single 16-bit unsigned integer p into a of 16-bit unsigned integers.
Then, the value is converted to a normalized floating-point value to generate the returned scalar.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm1x16: f / 65535.0

@see gtc_packing
@see vec2 unpackUnorm2x16(uint32 p)
@see vec4 unpackUnorm4x16(uint64 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm2x8(System.UInt16)">
First, unpacks a single 16-bit unsigned integer p into a pair of 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm2x8: clamp(f / 127.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see gtc_packing
@see float unpackSnorm1x8(uint8 p)
@see vec4 unpackSnorm4x8(uint32 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm1x8(System.Byte)">
First, unpacks a single 8-bit unsigned integer p into a single 8-bit signed integers.
Then, the value is converted to a normalized floating-point value to generate the returned scalar.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm1x8: clamp(f / 127.0, -1, +1)

@see gtc_packing
@see vec2 unpackSnorm2x8(uint16 p)
@see vec4 unpackSnorm4x8(uint32 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm2x8(System.UInt16)">
First, unpacks a single 16-bit unsigned integer p into a pair of 8-bit unsigned integers.
Then, each component is converted to a normalized floating-point value to generate the returned two-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm4x8: f / 255.0

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see gtc_packing
@see float unpackUnorm1x8(uint8 v)
@see vec4 unpackUnorm4x8(uint32 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm1x8(System.Byte)">
Convert a single 8-bit integer to a normalized floating-point value.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm4x8: f / 255.0

@see gtc_packing
@see vec2 unpackUnorm2x8(uint16 p)
@see vec4 unpackUnorm4x8(uint32 p)
@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="D:glm.umat4x4">
Unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat4x3">
Unsigned integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat4x2">
Unsigned integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat3x4">
Unsigned integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat3x3">
Unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat3x2">
Unsigned integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat2x4">
Unsigned integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat2x3">
Unsigned integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat2x2">
Unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat4">
Unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat3">
Unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.umat2">
Unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat4x4">
Signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat4x3">
Signed integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat4x2">
Signed integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat3x4">
Signed integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat3x3">
Signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat3x2">
Signed integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat2x4">
Signed integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat2x3">
Signed integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat2x2">
Signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat4">
Signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat3">
Signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.imat2">
Signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat4x4">
Low-qualifier unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat4x3">
Low-qualifier unsigned integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat4x2">
Low-qualifier unsigned integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat3x4">
Low-qualifier unsigned integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat3x3">
Low-qualifier unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat3x2">
Low-qualifier unsigned integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat2x4">
Low-qualifier unsigned integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat2x3">
Low-qualifier unsigned integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat2x2">
Low-qualifier unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat4">
Low-qualifier unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat3">
Low-qualifier unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_umat2">
Low-qualifier unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat4x4">
Medium-qualifier unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat4x3">
Medium-qualifier unsigned integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat4x2">
Medium-qualifier unsigned integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat3x4">
Medium-qualifier unsigned integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat3x3">
Medium-qualifier unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat3x2">
Medium-qualifier unsigned integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat2x4">
Medium-qualifier unsigned integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat2x3">
Medium-qualifier unsigned integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat2x2">
Medium-qualifier unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat4">
Medium-qualifier unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat3">
Medium-qualifier unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_umat2">
Medium-qualifier unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat4x4">
High-qualifier unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat4x3">
High-qualifier unsigned integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat4x2">
High-qualifier unsigned integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat3x4">
High-qualifier unsigned integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat3x3">
High-qualifier unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat3x2">
High-qualifier unsigned integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat2x4">
High-qualifier unsigned integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat2x3">
High-qualifier unsigned integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat2x2">
High-qualifier unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat4">
High-qualifier unsigned integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat3">
High-qualifier unsigned integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_umat2">
High-qualifier unsigned integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat4x4">
Low-qualifier signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat4x3">
Low-qualifier signed integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat4x2">
Low-qualifier signed integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat3x4">
Low-qualifier signed integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat3x3">
Low-qualifier signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat3x2">
Low-qualifier signed integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat2x4">
Low-qualifier signed integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat2x3">
Low-qualifier signed integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat2x2">
Low-qualifier signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat4">
Low-qualifier signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat3">
Low-qualifier signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.lowp_imat2">
Low-qualifier signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat4x4">
Medium-qualifier signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat4x3">
Medium-qualifier signed integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat4x2">
Medium-qualifier signed integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat3x4">
Medium-qualifier signed integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat3x3">
Medium-qualifier signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat3x2">
Medium-qualifier signed integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat2x4">
Medium-qualifier signed integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat2x3">
Medium-qualifier signed integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat2x2">
Medium-qualifier signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat4">
Medium-qualifier signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat3">
Medium-qualifier signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.mediump_imat2">
Medium-qualifier signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat4x4">
High-qualifier signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat4x3">
High-qualifier signed integer 4x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat4x2">
High-qualifier signed integer 4x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat3x4">
High-qualifier signed integer 3x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat3x3">
High-qualifier signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat3x2">
High-qualifier signed integer 3x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat2x4">
High-qualifier signed integer 2x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat2x3">
High-qualifier signed integer 2x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat2x2">
High-qualifier signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat4">
High-qualifier signed integer 4x4 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat3">
High-qualifier signed integer 3x3 matrix.
@see gtc_matrix_integer
</member>
        <member name="D:glm.highp_imat2">
@addtogroup gtc_matrix_integer
@{
High-qualifier signed integer 2x2 matrix.
@see gtc_matrix_integer
</member>
        <member name="M:glm.bitfieldInterleave(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
Interleaves the bits of x, y, z and w.
The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Int16,System.Int16,System.Int16,System.Int16)">
Interleaves the bits of x, y, z and w.
The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Byte,System.Byte,System.Byte,System.Byte)">
Interleaves the bits of x, y, z and w.
The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.SByte,System.SByte,System.SByte,System.SByte)">
Interleaves the bits of x, y, z and w.
The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.UInt32,System.UInt32,System.UInt32)">
Interleaves the bits of x, y and z.
The first bit is the first bit of x followed by the first bit of y and the first bit of z.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Int32,System.Int32,System.Int32)">
Interleaves the bits of x, y and z.
The first bit is the first bit of x followed by the first bit of y and the first bit of z.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.UInt16,System.UInt16,System.UInt16)">
Interleaves the bits of x, y and z.
The first bit is the first bit of x followed by the first bit of y and the first bit of z.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Int16,System.Int16,System.Int16)">
Interleaves the bits of x, y and z.
The first bit is the first bit of x followed by the first bit of y and the first bit of z.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Byte,System.Byte,System.Byte)">
Interleaves the bits of x, y and z.
The first bit is the first bit of x followed by the first bit of y and the first bit of z.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.SByte,System.SByte,System.SByte)">
Interleaves the bits of x, y and z.
The first bit is the first bit of x followed by the first bit of y and the first bit of z.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldDeinterleave(System.UInt64)">
Deinterleaves the bits of x.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(glm.vec&lt;0x2,System.UInt32,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Interleaves the bits of x and y.
The first bit is the first bit of v.x followed by the first bit of v.y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.UInt32,System.UInt32)">
Interleaves the bits of x and y.
The first bit is the first bit of x followed by the first bit of y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Int32,System.Int32)">
Interleaves the bits of x and y.
The first bit is the first bit of x followed by the first bit of y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldDeinterleave(System.UInt32)">
Deinterleaves the bits of x.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(glm.vec&lt;0x2,System.UInt16,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Interleaves the bits of x and y.
The first bit is the first bit of v.x followed by the first bit of v.y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.UInt16,System.UInt16)">
Interleaves the bits of x and y.
The first bit is the first bit of x followed by the first bit of y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Int16,System.Int16)">
Interleaves the bits of x and y.
The first bit is the first bit of x followed by the first bit of y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldDeinterleave(System.UInt16)">
Deinterleaves the bits of x.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(glm.vec&lt;0x2,System.Byte,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Interleaves the bits of x and y.
The first bit is the first bit of v.x followed by the first bit of v.y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.Byte,System.Byte)">
Interleaves the bits of x and y.
The first bit is the first bit of x followed by the first bit of y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="M:glm.bitfieldInterleave(System.SByte,System.SByte)">
Interleaves the bits of x and y.
The first bit is the first bit of x followed by the first bit of y.
The other bits are interleaved following the previous sequence.

@see gtc_bitfield
</member>
        <member name="D:glm.f64quat">
Double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64quat">
High double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32quat">
High single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64quat">
Medium double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32quat">
Medium single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64quat">
Low double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32quat">
Low single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.f32quat">
Single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x4">
Double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x3">
Double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x2">
Double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x4">
Double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x3">
Double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x2">
Double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x4">
Double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x3">
Double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x2">
Double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4">
Double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3">
Double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2">
Double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x3">
Single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x2">
Single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x4">
Single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x2">
Single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x4">
Single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x3">
Single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x3">
Single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x2">
Single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x4">
Single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x2">
Single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x4">
Single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x3">
Single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec4">
Double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec3">
Double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec2">
Double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec1">
Double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec4">
Single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec3">
Single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec2">
Single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec1">
Single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec4">
Single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec3">
Single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec2">
Single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec1">
Single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec4">
Default qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec3">
Default qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec2">
Default qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec1">
Default qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec4">
High qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec3">
High qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec2">
High qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec1">
High qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec4">
Medium qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec3">
Medium qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec2">
Medium qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec1">
Medium qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec4">
Low qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec3">
Low qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec2">
Low qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec1">
Low qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec4">
Default qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec3">
Default qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec2">
Default qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32vec1">
Default qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec4">
High qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec3">
High qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec2">
High qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec1">
High qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec4">
Medium qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec3">
Medium qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec2">
Medium qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec1">
Medium qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec4">
Low qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec3">
Low qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec2">
Low qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec1">
Low qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec4">
Default qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec3">
Default qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec2">
Default qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16vec1">
Default qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec4">
High qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec3">
High qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec2">
High qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec1">
High qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec4">
Medium qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec3">
Medium qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec2">
Medium qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec1">
Medium qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec4">
Low qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec3">
Low qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec2">
Low qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec1">
Low qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec4">
Default qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec3">
Default qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec2">
Default qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8vec1">
Default qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec4">
High qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec3">
High qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec2">
High qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec1">
High qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec4">
Medium qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec3">
Medium qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec2">
Medium qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec1">
Medium qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec4">
Low qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec3">
Low qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec2">
Low qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec1">
Low qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4">
High double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3">
High double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2">
High double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x4">
High double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x3">
High double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x2">
High double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x4">
High double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x3">
High double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x2">
High double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x4">
High double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x3">
High double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x2">
High double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4">
Medium double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3">
Medium double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2">
Medium double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x4">
Medium double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x3">
Medium double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x2">
Medium double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x4">
Medium double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x3">
Medium double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x2">
Medium double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x4">
Medium double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x3">
Medium double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x2">
Medium double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4">
Low double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3">
Low double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2">
Low double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x4">
Low double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x3">
Low double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x2">
Low double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x4">
Low double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x3">
Low double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x2">
Low double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x4">
Low double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x3">
Low double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x2">
Low double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x3">
High single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x2">
High single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x4">
High single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x2">
High single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x4">
High single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x3">
High single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2">
Medium single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x3">
Medium single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x2">
Medium single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x4">
Medium single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x2">
Medium single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x4">
Medium single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x3">
Medium single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x3">
Low single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x2">
Low single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x4">
Low single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x2">
Low single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x4">
Low single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x3">
Low single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x3">
High single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x2">
High single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x4">
High single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x2">
High single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x4">
High single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x3">
High single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2">
Medium single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x3">
Medium single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x2">
Medium single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x4">
Medium single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x2">
Medium single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x4">
Medium single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x3">
Medium single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x2">
Medium single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x3">
Low single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x2">
Low single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x4">
Low single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x2">
Low single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x4">
Low single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x3">
Low single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec4">
High double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec3">
High double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec2">
High double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec1">
High double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec4">
Medium double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec3">
Medium double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec2">
Medium double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec1">
Medium double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec4">
Low double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec3">
Low double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec2">
Low double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec1">
Low double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec4">
High single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec3">
High single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec2">
High single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec1">
High single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32vec4">
Medium single-qualifier floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec3">
Medium single-qualifier floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec2">
Medium single-qualifier floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec1">
Medium single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32vec4">
Low single-qualifier floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec3">
Low single-qualifier floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec2">
Low single-qualifier floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec1">
Low single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fvec4">
High Single-qualifier floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec3">
High Single-qualifier floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec2">
High Single-qualifier floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec1">
High single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec4">
Medium Single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec3">
Medium Single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec2">
Medium Single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec1">
Medium single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec4">
Low single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec3">
Low single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec2">
Low single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec1">
Low single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.f64">
Default 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.f32">
Default 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float64_t">
Default 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float32_t">
Default 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64">
High 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32">
High 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float64_t">
High 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float32_t">
High 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float64">
High 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float32">
High 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64">
Medium 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32">
Medium 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float64_t">
Medium 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float32_t">
Medium 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float64">
Medium 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float32">
Medium 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64">
Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32">
Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float64_t">
Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float32_t">
Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float64">
Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float32">
Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float64">
Double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float32">
Single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.u64">
Default qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32">
Default qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16">
Default qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8">
Default qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64">
High qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32">
High qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16">
High qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8">
High qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint64_t">
High qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint32_t">
High qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint16_t">
High qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint8_t">
High qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint64">
High qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint32">
High qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint16">
High qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint8">
High qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64">
Medium qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32">
Medium qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16">
Medium qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8">
Medium qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint64_t">
Medium qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint32_t">
Medium qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint16_t">
Medium qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint8_t">
Medium qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint64">
Medium qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint32">
Medium qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint16">
Medium qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint8">
Medium qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64">
Low qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32">
Low qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16">
Low qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8">
Low qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint64_t">
Low qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint32_t">
Low qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint16_t">
Low qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint8_t">
Low qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint64">
Low qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint32">
Low qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint16">
Low qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint8">
Low qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec4">
64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec3">
64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec2">
64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64vec1">
64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec4">
High qualifier 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec3">
High qualifier 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec2">
High qualifier 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec1">
High qualifier 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec4">
Medium qualifier 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec3">
Medium qualifier 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec2">
Medium qualifier 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec1">
Medium qualifier 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec4">
Low qualifier 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec3">
Low qualifier 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec2">
Low qualifier 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec1">
Low qualifier 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec4">
32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec3">
32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec2">
32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32vec1">
32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec4">
High qualifier 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec3">
High qualifier 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec2">
High qualifier 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec1">
High qualifier 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec4">
Medium qualifier 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec3">
Medium qualifier 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec2">
Medium qualifier 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec1">
Medium qualifier 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec4">
Low qualifier 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec3">
Low qualifier 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec2">
Low qualifier 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec1">
Low qualifier 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec4">
16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec3">
16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec2">
16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16vec1">
16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec4">
High qualifier 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec3">
High qualifier 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec2">
High qualifier 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec1">
High qualifier 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec4">
Medium qualifier 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec3">
Medium qualifier 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec2">
Medium qualifier 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec1">
Medium qualifier 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec4">
Low qualifier 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec3">
Low qualifier 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec2">
Low qualifier 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec1">
Low qualifier 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec4">
8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec3">
8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec2">
8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8vec1">
8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec4">
High qualifier 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec3">
High qualifier 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec2">
High qualifier 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec1">
High qualifier 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec4">
Medium qualifier 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec3">
Medium qualifier 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec2">
Medium qualifier 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec1">
Medium qualifier 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec4">
Low qualifier 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec3">
Low qualifier 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec2">
Low qualifier 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec1">
Low qualifier 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64">
64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16">
16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8">
8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64">
High qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32">
High qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16">
High qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8">
High qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int64_t">
High qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int32_t">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int16_t">
High qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int8_t">
High qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int64">
High qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int32">
High qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int16">
High qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int8">
High qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64">
Medium qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32">
Medium qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16">
Medium qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8">
Medium qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int64_t">
Medium qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int32_t">
Medium qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int16_t">
Medium qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int8_t">
Medium qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int64">
Medium qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int32">
Medium qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int16">
Medium qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int8">
Medium qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64">
Low qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32">
Low qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16">
Low qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8">
Low qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int64_t">
Low qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int32_t">
Low qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int16_t">
Low qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int8_t">
Low qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int64">
Low qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int32">
Low qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int16">
Low qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int8">
@addtogroup gtc_type_precision
@{
Low qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uvec1">
1 component vector of unsigned integer values.

@see ext_vector_uint1_precision
</member>
        <member name="D:glm.mediump_uvec1">
1 component vector of unsigned integer values.

@see ext_vector_uint1_precision
</member>
        <member name="D:glm.highp_uvec1">
@addtogroup ext_vector_uint1_precision
@{
1 component vector of unsigned integer values.

@see ext_vector_uint1_precision
</member>
        <member name="D:glm.uvec1">
@addtogroup ext_vector_uint1
@{
1 component vector of unsigned integer numbers.
</member>
        <member name="D:glm.lowp_ivec1">
1 component vector of signed integer values.
</member>
        <member name="D:glm.mediump_ivec1">
1 component vector of signed integer values.
</member>
        <member name="D:glm.highp_ivec1">
@addtogroup ext_vector_int1_precision
@{
1 component vector of signed integer values.
</member>
        <member name="D:glm.ivec1">
@addtogroup ext_vector_int1
@{
1 component vector of signed integer numbers.
</member>
        <member name="D:glm.lowp_vec1">
1 component vector of single-precision floating-point numbers using low precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.mediump_vec1">
1 component vector of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.highp_vec1">
@addtogroup ext_vector_float1_precision
@{
1 component vector of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.vec1">
@addtogroup ext_vector_float1
@{
1 components vector of single-precision floating-point numbers.
</member>
        <member name="D:glm.lowp_dvec1">
1 component vector of double-precision floating-point numbers using low precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.mediump_dvec1">
1 component vector of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.highp_dvec1">
@addtogroup ext_vector_double1_precision
@{
1 component vector of double-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.dvec1">
@addtogroup ext_vector_double1
@{
1 components vector of double-precision floating-point numbers.
</member>
        <member name="D:glm.lowp_bvec1">
1 component vector of bool values.
</member>
        <member name="D:glm.mediump_bvec1">
1 component vector of bool values.
</member>
        <member name="D:glm.highp_bvec1">
@addtogroup ext_vector_bool1_precision
@{
1 component vector of bool values.
</member>
        <member name="D:glm.bvec1">
@addtogroup ext_vector_bool1
@{
1 components vector of boolean.
</member>
        <member name="D:glm.uint64">
64 bit unsigned integer type.
</member>
        <member name="D:glm.uint32">
32 bit unsigned integer type.
</member>
        <member name="D:glm.uint16">
16 bit unsigned integer type.
</member>
        <member name="D:glm.uint8">
@addtogroup ext_scalar_uint_sized
@{
8 bit unsigned integer type.
</member>
        <member name="D:glm.int64">
64 bit signed integer type.
</member>
        <member name="D:glm.int32">
32 bit signed integer type.
</member>
        <member name="D:glm.int16">
16 bit signed integer type.
</member>
        <member name="D:glm.int8">
@addtogroup ext_scalar_int_sized
@{
8 bit signed integer type.
</member>
        <member name="D:glm.highp_quat">
Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.mediump_quat">
Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.lowp_quat">
@addtogroup ext_quaternion_float_precision
@{
Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.quat">
@addtogroup ext_quaternion_float
@{
Quaternion of single-precision floating-point numbers.
</member>
        <member name="D:glm.highp_dquat">
Quaternion of high double-qualifier floating-point numbers using high precision arithmetic in term of ULPs.

@see ext_quaternion_double_precision
</member>
        <member name="D:glm.mediump_dquat">
Quaternion of medium double-qualifier floating-point numbers using high precision arithmetic in term of ULPs.

@see ext_quaternion_double_precision
</member>
        <member name="D:glm.lowp_dquat">
@addtogroup ext_quaternion_double_precision
@{
Quaternion of double-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see ext_quaternion_double_precision
</member>
        <member name="D:glm.dquat">
@addtogroup ext_quaternion_double
@{
Quaternion of double-precision floating-point numbers.
</member>
        <member name="T:__JUMP_BUFFER">
@ref core
</member>
        <member name="M:glm.unpackHalf2x16(System.UInt32)">
Returns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values,
interpreting those values as 16-bit floating-point numbers according to the OpenGL Specification,
and converting them to 32-bit floating-point values.
The first component of the vector is obtained from the 16 least-significant bits of v;
the second component is obtained from the 16 most-significant bits of v.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml">GLSL unpackHalf2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packHalf2x16(glm.vec&lt;0x2,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns an unsigned integer obtained by converting the components of a two-component floating-point vector
to the 16-bit floating-point representation found in the OpenGL Specification,
and then packing these two 16- bit integers into a 32-bit unsigned integer.
The first vector component specifies the 16 least-significant bits of the result;
the second component specifies the 16 most-significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml">GLSL packHalf2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackDouble2x32(System.Double)">
Returns a two-component unsigned integer vector representation of v.
The bit-level representation of v is preserved.
The first component of the vector contains the 32 least significant bits of the double;
the second component consists the 32 most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackDouble2x32.xml">GLSL unpackDouble2x32 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packDouble2x32(glm.vec&lt;0x2,System.UInt32,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a double-qualifier value obtained by packing the components of v into a 64-bit value.
If an IEEE 754 Inf or NaN is created, it will not signal, and the resulting floating point value is unspecified.
Otherwise, the bit- level representation of v is preserved.
The first vector component specifies the 32 least significant bits;
the second component specifies the 32 most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packDouble2x32.xml">GLSL packDouble2x32 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm4x8(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm4x8: clamp(f / 127.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm4x8(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm4x8: f / 255.0

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm2x16(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm2x16: clamp(f / 32767.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml">GLSL unpackSnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm2x16(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm2x16: f / 65535.0

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packSnorm4x8(glm.vec&lt;0x4,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packSnorm4x8:	round(clamp(c, -1, +1) * 127.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packUnorm4x8(glm.vec&lt;0x4,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packUnorm4x8:	round(clamp(c, 0, +1) * 255.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packSnorm2x16(glm.vec&lt;0x2,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packSnorm2x16: round(clamp(v, -1, +1) * 32767.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm2x16.xml">GLSL packSnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packUnorm2x16(glm.vec&lt;0x2,System.Single,0x0&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@addtogroup core_func_packing
@{
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packUnorm2x16: round(clamp(c, 0, +1) * 65535.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm2x16.xml">GLSL packUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="D:glm.highp_mat2x2">
2 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x2">
2 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x2">
2 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat2">
2 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2">
2 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2">
@addtogroup core_matrix_precision
@{
2 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat2">
2 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat2x2">
@addtogroup core_matrix
@{
2 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat2x2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x2">
2 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2">
@addtogroup core_matrix_precision
@{
2 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat2">
2 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat2x2">
@addtogroup core_matrix
@{
2 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="M:glm.uintBitsToFloat(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a floating-point value corresponding to a
unsigned integer encoding of a floating-point value.
If an inf or NaN is passed in, it will not signal, and the
resulting floating point value is unspecified. Otherwise,
the bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml">GLSL uintBitsToFloat man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.intBitsToFloat(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a floating-point value corresponding to a signed
integer encoding of a floating-point value.
If an inf or NaN is passed in, it will not signal, and the
resulting floating point value is unspecified. Otherwise,
the bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml">GLSL intBitsToFloat man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.floatBitsToUint(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a unsigned integer value representing
the encoding of a floating-point value. The floatingpoint
value's bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml">GLSL floatBitsToUint man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.floatBitsToInt(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a signed integer value representing
the encoding of a floating-point value. The floating-point
value's bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml">GLSL floatBitsToInt man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="D:glm.highp_mat4x4">
4 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x4">
4 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x4">
4 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat4">
4 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4">
4 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4">
@addtogroup core_matrix_precision
@{
4 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4">
4 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat4x4">
@ingroup core_matrix
@{
4 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x4">
4 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4">
@addtogroup core_matrix_precision
@{
4 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat4">
4 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat4x4">
@addtogroup core_matrix
@{
4 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat4x3">
4 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x3">
4 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x3">
@addtogroup core_matrix_precision
@{
4 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4x3">
@addtogroup core_matrix
@{
4 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x3">
4 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x3">
4 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x3">
@addtogroup core_matrix_precision
@{
4 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat4x3">
@addtogroup core_matrix
@{
4 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat4x2">
4 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x2">
4 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x2">
@addtogroup core_matrix_precision
@{
4 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4x2">
@addtogroup core_matrix
@{
4 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x2">
4 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x2">
4 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x2">
@addtogroup core_matrix_precision
@{
4 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat4x2">
@addtogroup core_matrix
@{
4 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat3x4">
3 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x4">
3 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x4">
@addtogroup core_matrix_precision
@{
3 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat3x4">
@addtogroup core_matrix
@{
3 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat3x4">
3 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x4">
3 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x4">
@addtogroup core_matrix_precision
@{
3 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat3x4">
@addtogroup core_matrix
@{
3 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat3x3">
3 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x3">
3 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x3">
3 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat3">
3 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3">
3 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3">
@addtogroup core_matrix_precision
@{
3 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat3">
3 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat3x3">
@addtogroup core_matrix
@{
3 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat3x3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x3">
3 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3">
@addtogroup core_matrix_precision
@{
3 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat3">
3 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat3x3">
@addtogroup core_matrix
@{
3 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat3x2">
3 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x2">
3 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x2">
@addtogroup core_matrix_precision
@{
3 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat3x2">
@addtogroup core
@{
3 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat3x2">
3 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x2">
3 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x2">
@addtogroup core_matrix_precision
@{
3 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat3x2">
@addtogroup core_matrix
@{
3 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat2x4">
2 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x4">
2 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x4">
@addtogroup core_matrix_precision
@{
2 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat2x4">
@addtogroup core_matrix
@{
2 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat2x4">
2 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x4">
2 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x4">
@addtogroup core_matrix_precision
@{
2 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat2x4">
@addtogroup core_matrix
@{
2 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat2x3">
2 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x3">
2 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x3">
@addtogroup core_matrix_precision
@{
2 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat2x3">
@addtogroup core_matrix
@{
2 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat2x3">
2 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x3">
2 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x3">
@addtogroup core_matrix_precision
@{
2 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat2x3">
@addtogroup core_matrix
@{
2 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.lowp_uvec4">
4 components vector of low qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uvec4">
4 components vector of medium qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_uvec4">
@addtogroup core_vector_precision
@{
4 components vector of high qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.uvec4">
@addtogroup core_vector
@{
4 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_ivec4">
4 components vector of low qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_ivec4">
4 components vector of medium qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_ivec4">
@addtogroup core_vector_precision
@{
4 components vector of high qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.ivec4">
@addtogroup core_vector
@{
4 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_dvec4">
4 components vector of low double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec4">
4 components vector of medium double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec4">
@addtogroup core_vector_precision
@{
4 components vector of high double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dvec4">
@addtogroup core_vector
@{
4 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_vec4">
4 components vector of low single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_vec4">
4 components vector of medium single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_vec4">
@addtogroup core_vector_precision
@{
4 components vector of high single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.vec4">
@addtogroup core_vector
@{
4 components vector of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec4">
4 components vector of low qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec4">
4 components vector of medium qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec4">
@addtogroup core_vector_precision
@{
4 components vector of high qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec4">
@addtogroup core_vector
@{
4 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_uvec3">
3 components vector of low qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uvec3">
3 components vector of medium qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_uvec3">
@addtogroup core_vector_precision
@{
3 components vector of high qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.uvec3">
@addtogroup core_vector
@{
3 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_ivec3">
3 components vector of low qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_ivec3">
3 components vector of medium qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_ivec3">
@addtogroup core_vector_precision
@{
3 components vector of high qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.ivec3">
@addtogroup core_vector
@{
3 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_dvec3">
3 components vector of low double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec3">
3 components vector of medium double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec3">
@addtogroup core_vector_precision
@{
3 components vector of high double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dvec3">
@addtogroup core_vector
@{
3 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_vec3">
3 components vector of low single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_vec3">
3 components vector of medium single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_vec3">
@addtogroup core_vector_precision
@{
3 components vector of high single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.vec3">
@addtogroup core_vector
@{
3 components vector of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec3">
3 components vector of low qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec3">
3 components vector of medium qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec3">
@addtogroup core_vector_precision
@{
3 components vector of high qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec3">
@addtogroup core_vector
@{
3 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_uvec2">
2 components vector of low qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_uvec2">
2 components vector of medium qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_uvec2">
@addtogroup core_vector_precision
@{
2 components vector of high qualifier unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.uvec2">
@addtogroup core_vector
@{
2 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_ivec2">
2 components vector of low qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_ivec2">
2 components vector of medium qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_ivec2">
@addtogroup core_vector_precision
@{
2 components vector of high qualifier signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.ivec2">
@addtogroup core_vector
@{
2 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_dvec2">
2 components vector of low double-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec2">
2 components vector of medium double-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec2">
@addtogroup core_vector_precision
@{
2 components vector of high double-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dvec2">
@addtogroup core_vector
@{
2 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_vec2">
2 components vector of low single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_vec2">
2 components vector of medium single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_vec2">
@addtogroup core_vector_precision
@{
2 components vector of high single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.vec2">
@addtogroup core_vector
@{
2 components vector of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec2">
2 components vector of low qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec2">
2 components vector of medium qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec2">
@addtogroup core_vector_precision
@{
2 components vector of high qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec2">
@addtogroup core_vector
@{
2 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="T:glm.qualifier">
Qualify GLM types in term of alignment (packed, aligned) and precision in term of ULPs (lowp, mediump, highp)
</member>
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm1x8(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm2x8(glm.vec<0x2,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm1x8(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm2x8(glm.vec<0x2,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packHalf1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackHalf1x16(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packHalf4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackHalf4x16(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packI3x10_1x2(glm.vec<0x4,System.Int32,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackI3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packU3x10_1x2(glm.vec<0x4,System.UInt32,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackU3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm3x10_1x2(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackSnorm3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm3x10_1x2(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packF2x11_1x10(glm.vec<0x3,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackF2x11_1x10(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packF3x9_E1x5(glm.vec<0x3,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackF3x9_E1x5(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm2x4(System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm4x4(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm1x5_1x6_1x5(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm3x5_1x1(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm2x3_1x2(System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x8(System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x8(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt4x8(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint4x8(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x16(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt4x16(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x16(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint4x16(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x32(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x32(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm1x8(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm2x8(glm.vec<0x2,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm1x8(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm2x8(glm.vec<0x2,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packHalf1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackHalf1x16(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packHalf4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackHalf4x16(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packI3x10_1x2(glm.vec<0x4,System.Int32,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackI3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packU3x10_1x2(glm.vec<0x4,System.UInt32,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackU3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm3x10_1x2(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackSnorm3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm3x10_1x2(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packF2x11_1x10(glm.vec<0x3,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackF2x11_1x10(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packF3x9_E1x5(glm.vec<0x3,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackF3x9_E1x5(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm2x4(System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm4x4(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm1x5_1x6_1x5(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm3x5_1x1(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm2x3_1x2(System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x8(System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x8(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt4x8(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint4x8(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x16(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt4x16(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x16(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint4x16(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x32(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x32(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm1x8(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm2x8(glm.vec<0x2,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm1x8(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm2x8(glm.vec<0x2,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packHalf1x16(System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackHalf1x16(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packHalf4x16(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackHalf4x16(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packI3x10_1x2(glm.vec<0x4,System.Int32,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackI3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packU3x10_1x2(glm.vec<0x4,System.UInt32,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackU3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packSnorm3x10_1x2(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackSnorm3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packUnorm3x10_1x2(glm.vec<0x4,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm3x10_1x2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packF2x11_1x10(glm.vec<0x3,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackF2x11_1x10(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.packF3x9_E1x5(glm.vec<0x3,System.Single,0x0>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackF3x9_E1x5(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm2x4(System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm4x4(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm1x5_1x6_1x5(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm3x5_1x1(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUnorm2x3_1x2(System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x8(System.Int16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x8(System.UInt16)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt4x8(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint4x8(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x16(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt4x16(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x16(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint4x16(System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackInt2x32(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:glm.unpackUint2x32(System.UInt64)'. -->
    </members>
</doc>